name: Build OnePlus13
on:
  workflow_dispatch:
    inputs:
      KERNEL_SUFFIX:
        description: '内核名称'
        required: true
        default: '-android15-8-g4dc61d72e02f-abogki415959920-4k'
      KERNEL_TIME:
       description: "内核构建日期更改(默认为原厂)"
       required: true
       default: 'Mon May 17 09:36:49 UTC 2025'
      HOOK:
        type: choice
        description: "钩子选择"
        required: true
        default: tracepoint
        options:
          - kprobe
          - manual
          - tracepoint
      enable_feature_x:
       description: "是否启用kpm"
       required: false
       default: false
       type: boolean
      enable_feature_y:
       description: "是否启用lz4kd"
       required: false
       default: false
       type: boolean
      enable_feature_z:
       description: "是否添加风驰驱动"
       required: false
       default: false
       type: boolean
       


jobs:
  Sukisu-OnePlus13:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "Testady"
         git config --global user.email "564070684@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl

      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/Testady/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m JiuGeFaCai_oneplus_13_v.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: Set up SukiSU
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
         cd ./KernelSU
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         export KSU_VERSION=$KSU_VERSION
         sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile      

         cd ./common

           sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
           sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch

           patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
           echo "完成"

      - name: Apply HOOK
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
          echo "调用 kprobe 钩子"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "调用 manual 钩子"
          patch -p1 -F 3 < syscall_hooks.patch
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
          cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./
          echo "调用 tracepoint 钩子"
          patch -p1 -F 3 < tracepoint_hooks.patch
          fi
           
      - name: Set up susfs
        run: |
           cd kernel_workspace
           git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
           git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

           cd kernel_platform        
           cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
           cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
           cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
           #lz4k
           cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
           cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
           cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
           cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
           
      
      - name: Apply HMBird GKI patch
        run: |
         cd kernel_workspace/kernel_platform/common/drivers
         cat << 'EOF' > hmbird_patch.c
         #include <linux/init.h>
         #include <linux/module.h>
         #include <linux/of.h>
         #include <linux/slab.h>
         #include <linux/string.h>

         static int __init hmbird_patch_init(void)
         {
             struct device_node *ver_np;
             const char *type;
             int ret;

             ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
             if (!ver_np) {
                  pr_info("hmbird_patch: version_type node not found\n");
                  return 0;
             }

             ret = of_property_read_string(ver_np, "type", &type);
             if (ret) {
                  pr_info("hmbird_patch: type property not found\n");
                  of_node_put(ver_np);
                  return 0;
             }

             if (strcmp(type, "HMBIRD_OGKI")) {
                  of_node_put(ver_np);
                  return 0;
             }

             struct property *prop = of_find_property(ver_np, "type", NULL);
             if (prop) {
                  struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                  if (!new_prop) {
                       pr_info("hmbird_patch: kmalloc for new_prop failed\n");
                       of_node_put(ver_np);
                       return 0;
             }
             memcpy(new_prop, prop, sizeof(*prop));
             new_prop->value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
             if (!new_prop->value) {
                  pr_info("hmbird_patch: kmalloc for new_prop->value failed\n");
                  kfree(new_prop);
                  of_node_put(ver_np);
                  return 0;
            }
            strcpy(new_prop->value, "HMBIRD_GKI");
            new_prop->length = strlen("HMBIRD_GKI") + 1;

            if (of_remove_property(ver_np, prop) != 0) {
                 pr_info("hmbird_patch: of_remove_property failed\n");
                 return 0;
            }
            if (of_add_property(ver_np, new_prop) !=0) {
                 pr_info("hmbird_patch: of_add_property failed\n");
                 return 0;
            }
            pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
         }
         else {
             pr_info("hmbird_patch: type property structure not found\n");
         }
         of_node_put(ver_np);
         return 0;
         }
         early_initcall(hmbird_patch_init);
         MODULE_LICENSE("GPL");
         MODULE_AUTHOR("reigadegr");
         MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
         EOF
         if ! grep -q "hmbird_patch.o" Makefile; then
         echo "obj-y += hmbird_patch.o" >> Makefile
         fi
         cd ../../../
         git add -A
         git commit -m "Add HMBird GKI patch" || true
         

 
      - name: Apply lz4kd Patches
        if: ${{inputs.enable_feature_y }}
        run: |
          cd kernel_workspace/kernel_platform/common
            cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true

      - name: Upgrade LZ4
        run: |
          LZ4_VERSION="1.10.0"
          LZ4_DOWNLOAD_URL="https://github.com/lz4/lz4/archive/refs/tags/v${LZ4_VERSION}.tar.gz"
          cd kernel_workspace/kernel_platform/common
          mkdir -p lz4_temp && cd lz4_temp
          echo "下载LZ4 ${LZ4_VERSION}源码..."
          curl -Ls "${LZ4_DOWNLOAD_URL}" -o lz4.tar.gz
          tar -zxf lz4.tar.gz --strip-components=1

          # 复制文件并使用独立命名，避免与LZ4K冲突
          echo "复制LZ4文件到内核目录..."
          # 源码文件（添加"lz4v2_"前缀）
          cp lib/lz4.c ../lib/lz4v2_core.c
          cp lib/lz4.h ../lib/lz4v2_core.h
          cp lib/lz4hc.c ../lib/lz4v2_hc.c
          cp lib/lz4hc.h ../lib/lz4v2_hc.h
          # 头文件（放在独立路径）
          mkdir -p ../include/linux/lz4v2
          cp lib/lz4.h ../include/linux/lz4v2/lz4.h
          cp lib/lz4hc.h ../include/linux/lz4v2/lz4hc.h

          # 全局重命名函数和宏（彻底隔离命名空间）
          echo "重命名符号以避免冲突..."
          # 核心压缩函数重命名
          sed -i 's/LZ4_compress_default/lz4v2_compress_default/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          sed -i 's/LZ4_decompress_safe/lz4v2_decompress_safe/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          # HC高压缩函数重命名
          sed -i 's/LZ4_compress_HC/lz4v2_compress_HC/g' ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          # 内部宏和辅助函数重命名
          sed -i 's/LZ4_/LZ4V2_/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          
          # 添加内核兼容性适配
          echo "添加内核适配代码..."
          # 引入内核必要头文件
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_core.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_core.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_core.c
          # HC文件同样处理
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_hc.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_hc.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_hc.c

          # 添加模块声明（符合内核规范）
          echo "添加模块元数据..."
          cat >> ../lib/lz4v2_core.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_default);
          EXPORT_SYMBOL(lz4v2_decompress_safe);
          EOF

          cat >> ../lib/lz4v2_hc.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4HC 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_HC);
          EOF

          # 更新Makefile确保编译（独立于LZ4K）
          echo "更新Makefile配置..."
          if ! grep -q "lz4v2_core.o" ../lib/Makefile; then
            echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_core.o" >> ../lib/Makefile
            echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_hc.o" >> ../lib/Makefile
          fi

          # 清理临时文件
          cd .. && rm -rf lz4_temp
          echo "LZ4 ${LZ4_VERSION}集成完成（与LZ4K兼容）"
           
      - name: Add SUSFS Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig

                  
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LOCALVERSION_AUTO=n" >> ./common/arch/arm64/configs/gki_defconfig

          # TMPFS配置*
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

          # BBR配置*
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig

          # ECN配置*
          echo "CONFIG_IP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IPV6_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig        
                    
          #Remove check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

          # HOOK配置
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KPROBES=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
      - name: Add KPM Configuration Settings
        if: ${{inputs.enable_feature_x }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
         
          #Remove check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"
          
      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform
         sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
         sudo sed -i 's/-4k/${{ github.event.inputs.KERNEL_SUFFIX }}/g' ./common/arch/arm64/configs/gki_defconfig

      - name: Add sched_ext
        if: ${{inputs.enable_feature_z }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched
      - name: Modify kernel version to 6.6.66
        run: |
         cd kernel_workspace/kernel_platform/common
         # 修改内核主版本号
         sed -i 's/^VERSION = .*/VERSION = 6/' Makefile
         sed -i 's/^PATCHLEVEL = .*/PATCHLEVEL = 6/' Makefile
         sed -i 's/^SUBLEVEL = .*/SUBLEVEL = 66/' Makefile
         # 清除额外版本号
         sed -i 's/^EXTRAVERSION = .*/EXTRAVERSION =/' Makefile
         # 确认修改
         echo "Modified kernel version:"
         grep -E '^VERSION|^PATCHLEVEL|^SUBLEVEL|^EXTRAVERSION' Makefile

      - name: Build Kernel
        run: |
          export KBUILD_BUILD_TIMESTAMP="${{ github.event.inputs.KERNEL_TIME }}"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          sudo apt install libelf-dev
          cd kernel_workspace/kernel_platform/common
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig all  
          
      - name: Apply Linux Patch
        run: |
         cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
         curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image          
               
      - name: Make AnyKernel3
        run: |
         git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1      
         rm -rf ./AnyKernel3/.git
         rm -rf ./AnyKernel3/push.sh
         cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
         name: OnePlus13_${{ env.KSUVER }}
         path: ./AnyKernel3/*
